type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = FALSE,
colors = c("white", "white", "red"))
dist_metrics <- dist(1-diss_df, diag = T)
dist_metrics
clustered <- hclust(dist_metrics, method = "complete")
clusters <- 8
k_color_palettes <- brewer.pal(clusters, "Accent")
fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
shiny::runApp()
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
gggg <- ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
ggplotly(gggg)
library(plotly)
ggplotly(gggg)
frequent_words <- 20             #define number of most frequent words
data.frame() -> cloudsFW         #define df used in loop
for (d in 1:length(clouds)) {
#move the words column (nested in the clouds) list of every band into a new df
cloudsFW[1:frequent_words,d] <- clouds[[d]][1:frequent_words,1]
}
names(cloudsFW) <- names(clouds)  #assign correct names to new df
# calculating a dissimilarity matrix (proportion of matching words)
diss_df <- data.frame()
diss_df
# calculating a dissimilarity matrix (proportion of matching words)
diss_df <- data.frame()
for (n in 1:length(cloudsFW)) {
# loops through every band
for (m in 1:length(cloudsFW)) {
# loops through every band again
# calculates dissimilarity (proportion of matching words) among the bands
diss_df[m,n] <-  1 - mean(cloudsFW[,n] %in% cloudsFW[,m])
}
}
cloudsFW$Manowar
similarity_matrix <- corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = F,
title = "Lyrics similarity among bands")
names(diss_df) <- names(clouds)
row.names(diss_df) <- names(clouds)
similarity_matrix <- corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = F,
title = "Lyrics similarity among bands")
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
dist_metrics <- dist(1-diss_df, diag = T)
clustered <- hclust(dist_metrics, method = "complete")
clusters <- 8
k_color_palettes <- brewer.pal(clusters, "Accent")
fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
k_color_palettes <- brewer.pal(clusters, "Accent")
clusters <- 8
clustered <- hclust(dist_metrics, method = "complete")
clustered
plot(clustered)
runApp()
library(shinythemes)
runApp()
runApp()
icon()
runApp()
runApp()
runApp()
runApp()
frequent_words <- 50             #define number of most frequent words
data.frame() -> cloudsFW         #define df used in loop
frequent_words
clouds
View(clouds)
cloudsFW
frequent_words <- 50             #define number of most frequent words
data.frame() -> cloudsFW         #define df used in loop
for (d in 1:length(clouds)) {
#move the words column (nested in the clouds) list of every band into a new df
cloudsFW[1:frequent_words,d] <- clouds[[d]][1:frequent_words,1]
}
View(cloudsFW)
names(cloudsFW) <- names(clouds)  #assign correct names to new df
cloudsFW
for (n in 1:length(cloudsFW)) {
# loops through every band
for (m in 1:length(cloudsFW)) {
# loops through every band again
# calculates dissimilarity (proportion of matching words) among the bands
diss_df[m,n] <-  1 - mean(cloudsFW[,n] %in% cloudsFW[,m])
}
}
# calculating a dissimilarity matrix (proportion of matching words)
diss_df <- data.frame()
for (n in 1:length(cloudsFW)) {
# loops through every band
for (m in 1:length(cloudsFW)) {
# loops through every band again
# calculates dissimilarity (proportion of matching words) among the bands
diss_df[m,n] <-  1 - mean(cloudsFW[,n] %in% cloudsFW[,m])
}
}
cloudsFW$Manowar
diss_df
names(diss_df) <- names(clouds)
row.names(diss_df) <- names(clouds)
similarity_matrix
similarity_matrix <- corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = F,
title = "Lyrics similarity among bands")
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
library(ggcorrplot)
library(tidyverse)
library(httr)
library(rvest)
library(lubridate)
library(xml2)
library(xslt)
library(tm)
library(qdapRegex)
library(SnowballC)
library(RColorBrewer)
library(wordcloud2)
library(shiny)
library(ggridges)
library(ggpubr)
library(ggcorrplot)
library(cluster)
library(factoextra)
library(corrplot)
install.packages("factoextra")
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
similarity_matrix <- corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = F,
title = "Lyrics similarity among bands")
dist_metrics <- dist(1-diss_df, diag = T)
clustered <- hclust(dist_metrics, method = "complete")
plot(clustered)
clusters <- 8
k_color_palettes <- brewer.pal(clusters, "Accent")
fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
plot(clustered)
fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
install.packages("factoextra")
factoextra::fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
clusters <- 5
k_color_palettes <- brewer.pal(clusters, "Accent")
factoextra::fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
dist_metrics
diss_df
1-diss_df
dist_metrics <- factoextra::dist(1-diss_df, diag = T)
dist_metrics
dist_metrics
clustered <- hclust(dist_metrics, method = "complete")
plot(clustered)
similarity_matrix
similarity_matrix
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
similarity_matrix <- corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = F,
title = "Lyrics similarity among bands")
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
factoextra::fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
k_color_palettes
clusters
clusters <- 4
k_color_palettes <- brewer.pal(clusters, "Accent")
factoextra::fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
clustered
factoextra::fviz_dend(clustered,
type = "rectangle",
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
factoextra::fviz_dend(clustered,
type = "circular",
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
factoextra::fviz_dend(clustered,
type = "phylogenic",
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
install.packages("xslt")
runApp()
plot_list
plot_list
plot_list
runApp()
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
runApp()
runApp()
similarity_matrix
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = F,
title = "Lyrics similarity among bands")
diss_df
corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = T,
title = "Lyrics similarity among bands")
runApp()
dist_metrics
factoextra::fviz_dend(clustered,
type = "phylogenic",
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
k_color_palettes
runApp()
git add -A
library(tidyverse)
library(rjson)
library(lubridate)
setwd("~/Dropbox/Scripts_R/ZDF")
json <- fromJSON(file = "Meine-ZDF-Nutzungsdaten(1).json")
glimpse(json)
# List with only 1 element
json_sub <- json[[1]]
glimpse(json_sub)
name <- json_sub$username
glimpse(json_sub$data)
zuletzt_gesehen <- json_sub$data[[1]][[2]]
weiterschauen <- json_sub$data[[2]][[2]]
user_raw1 = tibble(.rows = length(zuletzt_gesehen))
user_raw2 = tibble(.rows = length(weiterschauen))
for (s in 1:length(zuletzt_gesehen)) {
user_raw1$name[s] <- name
user_raw1$externalId[s] <- zuletzt_gesehen[[s]]$externalId
user_raw1$sendung_start[s] <- zuletzt_gesehen[[s]]$eventDate
}
for (s in 1:length(weiterschauen)) {
user_raw2$externalId[s] <- weiterschauen[[s]]$externalId
user_raw2$sendung_stop[s] <- weiterschauen[[s]]$eventDate
user_raw2$saved_duration[s] <- weiterschauen[[s]]$currentPosition
}
user_data <- left_join(user_raw1, user_raw2, by = "externalId")
user_data2 <- user_data %>%
mutate(temp_date = as_date(str_extract(sendung_start, "\\d{4}-\\d{2}-\\d{2}")),
temp_time = str_extract(sendung_start, "\\d{2}:\\d{2}:\\d{2}"),
sendung_start = as.POSIXct(strptime(str_c(temp_date, " ", temp_time),
format= "%Y-%m-%d %H:%M:%S"))
) %>%
mutate(temp_date = as_date(str_extract(sendung_stop, "\\d{4}-\\d{2}-\\d{2}")),
temp_time = str_extract(sendung_stop, "\\d{2}:\\d{2}:\\d{2}"),
sendung_stop = as.POSIXct(strptime(str_c(temp_date, " ", temp_time),
format= "%Y-%m-%d %H:%M:%S"))
) %>%
mutate(saved_duration = as.integer(saved_duration)) %>%
mutate(actual_duration = as.integer(sendung_stop - sendung_start)) %>%
mutate(skipped = ifelse((saved_duration - actual_duration) > 10, TRUE, FALSE)) %>%
select(-temp_date, - temp_time)
glimpse(user_data2)
user_data2 %>% drop_na() %>%
filter(!is.na(sendung_stop)) %>%
ggplot(aes(x = saved_duration,
y = fct_reorder(externalId,
saved_duration),
fill = skipped)) +
geom_col() +
theme_classic()
user_data3 <- user_data2 %>% filter(!is.na(sendung_stop)) %>% arrange(desc(saved_duration))
user_data2
library(tidyverse)
library(rjson)
library(lubridate)
setwd("~/Dropbox/Scripts_R/ZDF")
json <- fromJSON(file = "Meine-ZDF-Nutzungsdaten(1).json")
glimpse(json)
# List with only 1 element
json_sub <- json[[1]]
glimpse(json_sub)
name <- json_sub$username
glimpse(json_sub$data)
zuletzt_gesehen <- json_sub$data[[1]][[2]]
weiterschauen <- json_sub$data[[2]][[2]]
user_raw1 = tibble(.rows = length(zuletzt_gesehen))
user_raw2 = tibble(.rows = length(weiterschauen))
for (s in 1:length(zuletzt_gesehen)) {
user_raw1$name[s] <- name
user_raw1$externalId[s] <- zuletzt_gesehen[[s]]$externalId
user_raw1$sendung_start[s] <- zuletzt_gesehen[[s]]$eventDate
}
for (s in 1:length(weiterschauen)) {
user_raw2$externalId[s] <- weiterschauen[[s]]$externalId
user_raw2$sendung_stop[s] <- weiterschauen[[s]]$eventDate
user_raw2$saved_duration[s] <- weiterschauen[[s]]$currentPosition
}
user_data <- left_join(user_raw1, user_raw2, by = "externalId")
user_data2 <- user_data %>%
mutate(temp_date = as_date(str_extract(sendung_start, "\\d{4}-\\d{2}-\\d{2}")),
temp_time = str_extract(sendung_start, "\\d{2}:\\d{2}:\\d{2}"),
sendung_start = as.POSIXct(strptime(str_c(temp_date, " ", temp_time),
format= "%Y-%m-%d %H:%M:%S"))
) %>%
mutate(temp_date = as_date(str_extract(sendung_stop, "\\d{4}-\\d{2}-\\d{2}")),
temp_time = str_extract(sendung_stop, "\\d{2}:\\d{2}:\\d{2}"),
sendung_stop = as.POSIXct(strptime(str_c(temp_date, " ", temp_time),
format= "%Y-%m-%d %H:%M:%S"))
) %>%
mutate(saved_duration = as.integer(saved_duration)) %>%
mutate(actual_duration = as.integer(sendung_stop - sendung_start)) %>%
mutate(skipped = ifelse((saved_duration - actual_duration) > 10, TRUE, FALSE)) %>%
select(-temp_date, - temp_time)
glimpse(user_data2)
user_data2 %>% drop_na() %>%
filter(!is.na(sendung_stop)) %>%
ggplot(aes(x = saved_duration,
y = fct_reorder(externalId,
saved_duration),
fill = skipped)) +
geom_col() +
theme_classic()
user_data3 <- user_data2 %>% filter(!is.na(sendung_stop)) %>% arrange(desc(saved_duration))
