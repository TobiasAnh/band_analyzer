show.diag = FALSE,
colors = c("white", "white", "red")) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "red")
})
# render metric plot
output$metric_plot <- renderPlot({ plot_list[[input$metric]]  })
}
shinyApp(ui, server)
ggcorrplot(corr = 1-diss_df,
method = "square",
type = "upper",
title = "Lyrics similarity among bands",
show.diag = FALSE,
colors = c("white", "white", "red")) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "red")
ggcorrplot(corr = 1-diss_df,
method = "square",
type = "upper",
title = "Lyrics similarity among bands",
show.diag = FALSE,
colors = c("white", "white", "red")) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "darkred")
ggcorrplot(corr = 1-diss_df,
method = "square",
type = "upper",
title = "Lyrics similarity among bands",
show.diag = FALSE,
colors = c("white", "white", "red")) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "black")
ggcorrplot(corr = 1-diss_df,
method = "square",
type = "lower",
title = "Lyrics similarity among bands",
show.diag = FALSE,
colors = c("white", "white", "red")) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "black")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = FALSE,
colors = c("white", "white", "red")) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "black")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = FALSE) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "black")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "black")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 0) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "black")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "black")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "darkgreen")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high =  "darkgreen")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high =  "darkgreen")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, legend.title = "Similarity") +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high =  "darkgreen")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, outline.color = "black") +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high =  "darkgreen")
ggcorrplot(corr = 1-diss_df,
method = "square",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, outline.color = F) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high =  "darkgreen")
corrplot::corrplot(as.matrix(1-diss_df), type = "upper", is.corr = T, tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6, addgrid.col = "darkgray", diag = F, title = "Lyrics similarity among bands")
ggcorrplot(corr = 1-diss_df,
method = "square",
type = "upper",
title = "Lyrics similarity among bands",
show.diag = FALSE,
colors = c("white", "white", "red")) +
scale_fill_gradient2(limit = c(0,1), low = "white", high =  "red")
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, outline.color = F) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, outline.color = F) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
library(tidyverse)
library(httr)
library(rvest)
library(lubridate)
library(xml2)
library(xslt)
library(tm)
library(qdapRegex)
library(SnowballC)
library(RColorBrewer)
library(wordcloud2)
View(band_table)
library(shiny); runApp('lyrics_shinyAPP.R')
install.packages("xslt")
runApp('lyrics_shinyAPP.R')
library(xslt)
library(tidyverse)
library(httr)
library(rvest)
library(lubridate)
library(xml2)
library(xslt)
library(tm)
library(qdapRegex)
library(SnowballC)
library(RColorBrewer)
library(wordcloud2)
library(shiny)
#### R shiny app ####
ui <- navbarPage("Band Analyzer", fluid = F,
# Tab 1 title #########################################################
tabPanel("Lyrics wordclouds",
# Sidebar
sidebarLayout(
# Define the sidebar with inputs (2 Bands are choosable)
sidebarPanel(width = 4,
selectInput("band1", "Choose band/artist",
choices= names(FLL),
selected = "Elvis Presley"),
#horizontal line
hr(),
helpText("Lyrics have been web-scraped automatically from ",
tags$a(href="https://www.lyrics.com/", "Lyrics.com.",), "'Stopwords'
(frequently used english words) have been removed from all lyrics.
"),
hr(),
helpText("Source codes available ", tags$a(href="https://github.com/TobiasAnh/band_analyzer", "here.")),
),
# Create wordcloud and similarity matrix
mainPanel(column(align="center", width = 8,
wordcloud2Output("wordcloud_1"),
sliderInput("maxwords1",
"Max. words",
min = 50,
max = 500,
value = 100,
step = 50),
hr(),
plotOutput("similarity_matrix"),
)
)
# sidebar 1 closes
)),
# tab 1 closes#
tabPanel("Band metrics", # tab 2 opens
# Sidebar tab 2
sidebarLayout(
# Define the sidebar input (2 Bands are choosable)
sidebarPanel(radioButtons("metric", "Choose metric:",
selected = "count",
choiceNames = c("Number of songs", "Lexical diversity (TTR)", "Song duration"),
choiceValues = names(plot_list)),
#horizontal line
hr(),
helpText("Source: ",
tags$a(href="https://www.lyrics.com/", "Lyrics.com")),
width = 3
),
# Create a spot for the barplot
mainPanel(width = 6,
plotOutput("metric_plot"))
)
)
)
server <- function(input, output, session) {
# render wordcloud ONE with 'wordcloud2' using 'band1'
output$wordcloud_1 <- renderWordcloud2({
clouds[[input$band1]] %>% top_n(input$maxwords1) %>%
wordcloud2(color = "random-dark",
fontFamily = "Calibri",
#shape = "star",
ellipticity = 0.8,
size = 0.8)
})
# render similarity matrix plot
output$similarity_matrix <- renderPlot({
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
})
# render metric plot
output$metric_plot <- renderPlot({ plot_list[[input$metric]]  })
}
shinyApp(ui, server)
start_loop
library(shiny); runApp('lyrics_shinyAPP.R')
runApp('lyrics_shinyAPP.R')
runApp('lyrics_shinyAPP.R')
load("~/Dropbox/Scripts_R/band_analyzer/FLL.RData")
load("~/Dropbox/Scripts_R/band_analyzer/.RData")
library(xslt)
library(dplyr)
library(tidyverse)
library(ggplot2, purrr, tibble, stringr, tidyr, forcats, readr)
library(c(ggplot2, purrr, tibble, stringr, tidyr, forcats, readr))
shiny::runApp()
library(dplyr)
runApp()
runApp()
runApp()
?`libraryIQR-class`
?library
require(dplyr)
?require
.libPaths()
detach("package:purrr", unload = TRUE)
detach("package:qdapRegex", unload = TRUE)
detach("package:RColorBrewer", unload = TRUE)
detach("package:readr", unload = TRUE)
detach("package:SnowballC", unload = TRUE)
detach("package:stringr", unload = TRUE)
detach("package:tibble", unload = TRUE)
detach("package:tidyr", unload = TRUE)
detach("package:tm", unload = TRUE)
detach("package:wordcloud2", unload = TRUE)
detach("package:base", unload = TRUE)
library(base, lib.loc = "/usr/lib/R/library")
runApp()
runApp()
runApp()
?ggcorrplot
library(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
runApp()
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
runApp()
fct_anon()
library(forcats)
fct_reorder()
fct_reorder()
runApp()
shiny::runApp()
library(tidyverse)
library(httr)
library(rvest)
library(lubridate)
library(xml2)
library(xslt)
library(tm)
library(qdapRegex)
library(SnowballC)
library(RColorBrewer)
library(wordcloud2)
library(shiny)
library(ggridges)
library(ggpubr)
word_type <- integer()       # number of unique words
TTR_10k <- double()          # type / token ratio (standardized for the first 10k words)
song_count <- integer()      # number of songs
median_duration <- integer() # median song duration of each song
sd_duration <- integer()     # standard deviation of song duration
metrics
plot_song_count
plot_ttr
durations_arranged
plot_duration
library(tidyverse)
library(httr)
library(rvest)
library(lubridate)
library(xml2)
library(xslt)
library(tm)
library(qdapRegex)
library(SnowballC)
library(RColorBrewer)
library(wordcloud2)
library(shiny)
library(ggridges)
library(ggpubr)
library(ggcorrplot)
library(cluster)
library(factoextra)
library(corrplot)
install.packages(corrplot)
install.packages("corrplot")
library(tidyverse)
library(httr)
library(rvest)
library(lubridate)
library(xml2)
library(xslt)
library(tm)
library(qdapRegex)
library(SnowballC)
library(RColorBrewer)
library(wordcloud2)
library(shiny)
library(ggridges)
library(ggpubr)
library(ggcorrplot)
library(cluster)
library(factoextra)
library(corrplot)
for (d in 1:length(clouds)) {
#move the words column (nested in the clouds) list of every band into a new df
cloudsFW[1:frequent_words,d] <- clouds[[d]][1:frequent_words,1]
}
names(cloudsFW) <- names(clouds)  #assign correct names to new df
names(cloudsFW)
# calculating a dissimilarity matrix (proportion of matching words)
diss_df <- data.frame()
for (n in 1:length(cloudsFW)) {
# loops through every band
for (m in 1:length(cloudsFW)) {
# loops through every band again
# calculates dissimilarity (proportion of matching words) among the bands
diss_df[m,n] <-  1 - mean(cloudsFW[,n] %in% cloudsFW[,m])
}
}
cloudsFW$Manowar
names(diss_df) <- names(clouds)
row.names(diss_df) <- names(clouds)
similarity_matrix <- corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = F,
title = "Lyrics similarity among bands")
similarity_matrix
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = FALSE,
colors = c("white", "white", "red"))
dist_metrics <- dist(1-diss_df, diag = T)
dist_metrics
clustered <- hclust(dist_metrics, method = "complete")
clusters <- 8
k_color_palettes <- brewer.pal(clusters, "Accent")
fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
shiny::runApp()
ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
gggg <- ggcorrplot(corr = 1-diss_df,
method = "circle",
#type = "lower",
title = "Lyrics similarity among bands",
show.diag = T, tl.srt = 90, ) +
scale_fill_gradient2(limit = c(0,0.9), low = "white", high = "darkgreen")
ggplotly(gggg)
library(plotly)
ggplotly(gggg)
frequent_words <- 20             #define number of most frequent words
data.frame() -> cloudsFW         #define df used in loop
for (d in 1:length(clouds)) {
#move the words column (nested in the clouds) list of every band into a new df
cloudsFW[1:frequent_words,d] <- clouds[[d]][1:frequent_words,1]
}
names(cloudsFW) <- names(clouds)  #assign correct names to new df
# calculating a dissimilarity matrix (proportion of matching words)
diss_df <- data.frame()
diss_df
# calculating a dissimilarity matrix (proportion of matching words)
diss_df <- data.frame()
for (n in 1:length(cloudsFW)) {
# loops through every band
for (m in 1:length(cloudsFW)) {
# loops through every band again
# calculates dissimilarity (proportion of matching words) among the bands
diss_df[m,n] <-  1 - mean(cloudsFW[,n] %in% cloudsFW[,m])
}
}
cloudsFW$Manowar
similarity_matrix <- corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = F,
title = "Lyrics similarity among bands")
names(diss_df) <- names(clouds)
row.names(diss_df) <- names(clouds)
similarity_matrix <- corrplot::corrplot(as.matrix(1-diss_df),
type = "upper",
is.corr = F,
tl.col = "black", tl.cex = 0.8, cl.cex = 0.8,
number.cex = 0.6,
addgrid.col = "darkgray",
diag = F,
title = "Lyrics similarity among bands")
ggcorrplot(corr = 1-diss_df,
method = "circle",
type = "full",
hc.method = TRUE,
title = "Lyrics similarity among bands",
show.diag = TRUE,
colors = c("white", "white", "red"))
dist_metrics <- dist(1-diss_df, diag = T)
clustered <- hclust(dist_metrics, method = "complete")
clusters <- 8
k_color_palettes <- brewer.pal(clusters, "Accent")
fviz_dend(clustered,
main = "Band lyrics dendrogram",  #title
k = clusters,                     #predefined clusters
k_colors = "black",               #cluster colors
color_labels_by_k = T,
rect = TRUE,                      #add rectangles
rect_border = k_color_palettes,  #rectangle colors
rect_fill = T,
ylab = "")
k_color_palettes <- brewer.pal(clusters, "Accent")
clusters <- 8
clustered <- hclust(dist_metrics, method = "complete")
clustered
plot(clustered)
runApp()
library(shinythemes)
runApp()
runApp()
icon()
runApp()
runApp()
runApp()
runApp()
